View(dailyData)
dailyData=data.table(bulkelectricity%>% group_by(Date)%>% summarise(dailyConsumption=mean(as.numeric(Consumption))))
View(dailyData)
dailyData$Date=as.Date(dailyData$Date, format = "%Y-%m-%d")
dailyData=dailyData%>%arrange(Date)
ggplot(dailyData,aes(x=Date,y=dailyConsumption))+geom_line(color="orange")+
labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
ggplot(bulkelectricity[1:1500],aes(x=Date,y=Consumption))+geom_line(color="orange")+
labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
ggplot(bulkelectricity,aes(x=Date,y=Consumption[1:1500]))+geom_line(color="orange")+
labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
ggplot(bulkelectricity,aes(x=Date,y=Consumption[1:1500]))+geom_line(color="orange")+
labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
ggplot(bulkelectricity,aes(x=Date,y=Consumption[1:1500]))+geom_line(color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
xd=bulkelectricity[1:1500]
View(xd)
ggplot(xd,aes(x=Date,y=Consumption))+geom_line(color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
ggplot(bulkelectricity,aes(x=Hour,y=Consumption))+geom_line(color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
View(bulkelectricity)
ggplot(bulkelectricity,aes(y=Consumption))+geom_line(color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
ggplot(bulkelectricity,aes(x=Hour,y=Consumption))+geom_line(color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
bulkelectricity$Date=as.Hour(bulkelectricity$Hour, format = "%H")
ggplot(bulkelectricity,aes(x=Hour,y=Consumption))+geom_line(color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
plot(acf(dailyData$dailyConsumption, plot=FALSE), main = "Autocorrelation of Mean Electricity Consumption (Daily)",
col="pink", lwd=1.5,xlab="Lag in Days")
plot(acf(dailyData$dailyConsumption, plot=FALSE), main = "Autocorrelation of Mean Electricity Consumption (Daily)",
col="orange", lwd=1.5,xlab="Lag in Days")
plot(acf(dailyData$dailyConsumption, plot=FALSE), main = "Autocorrelation of Mean Electricity Consumption (Daily)",
col="orange", lwd=1.5,xlab="Lag in Days",lag.max=60)
plot(acf(dailyData$dailyConsumption, plot=FALSE), main = "Autocorrelation of Mean Electricity Consumption (Daily)",
col="orange", lwd=1.5,xlab="Lag in Days",lagmax=60)
plot(acf(dailyData$dailyConsumption, plot=FALSE), main = "Autocorrelation of Mean Electricity Consumption (Daily)",
col="orange", lwd=1.5,xlab="Lag in Days",lagmax=60)
ggplot(dailyData,aes(x=Date,y=dailyConsumption))+geom_line(color="orange")+
labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
plot(acf(dailyData$dailyConsumption, plot=FALSE), main = "Autocorrelation of Mean Electricity Consumption (Daily)",
col="orange", lwd=1.5,xlab="Lag in Days",lagmax=60)
plot(acf(dailyData$dailyConsumption, plot=FALSE,lag.max=60), main = "Autocorrelation of Mean Electricity Consumption (Daily)",
col="orange", lwd=1.5,xlab="Lag in Days")
ggplot(dailyData[,dailyConsumption,by=Date], aes(x=dailyConsumption)) +
geom_histogram( colour="white", fill="pink",bins=12)+
geom_density(alpha=.2, fill="turquoise", colour="lightblue") +
labs(title = "Histograms of Amount of Personal Loan Taken (per million) in Turkey over 2015-2020",
x = "Amount of Personal Loan Taken (per million) Taken in a Month",
y = "Density") +
theme_minimal() +theme(axis.text.x = element_text(angle = 45, hjust = 1)) + facet_wrap(~year(Date))
ggplot(dailyData[,dailyConsumption,by=Date], aes(x=dailyConsumption)) +
geom_histogram((aes(y=..density..),colour="white", fill="pink",bins=12)+
geom_density(alpha=.2, fill="turquoise", colour="lightblue") +
labs(title = "Histograms of Amount of Personal Loan Taken (per million) in Turkey over 2015-2020",
x = "Amount of Personal Loan Taken (per million) Taken in a Month",
y = "Density") +
theme_minimal() +theme(axis.text.x = element_text(angle = 45, hjust = 1)) + facet_wrap(~year(Date))
ggplot(dailyData,PersonalLoanTaken,by=Date], aes(x=PersonalLoanTaken/1000000)) +
geom_histogram( colour="white", fill="pink",bins=12)+
geom_density(alpha=.2, fill="turquoise", colour="lightblue") +
labs(title = "Histograms of Amount of Personal Loan Taken (per million) in Turkey over 2015-2020",
x = "Amount of Personal Loan Taken (per million) Taken in a Month",
y = "Density") +
theme_minimal() +theme(axis.text.x = element_text(angle = 45, hjust = 1)) + facet_wrap(~year(Date))
#electric_data[,Consumption:=as.numeric(gsub(",", "", Consumption))]
electric_data=bulkelectricity[,list(daily_mean=mean(Consumption,na.rm=T)),by=list(Date)]
dailyData=data.table(electricity%>% group_by(Date)%>% summarise(dailyConsumption=mean(Consumption)))
dailyData$Date=as.Date(dailyData$Date, format = "%d.%m.%Y")
dailyData=dailyData%>%arrange(Date)
ggplot(dailyData[,dailyConsumption,by=Date], aes(x=dailyConsumption)) +
geom_histogram(aes(y=..density..),colour="white", fill="pink",bins=12)+
geom_density(alpha=.2, fill="turquoise", colour="lightblue") +
labs(title = "Histograms of Amount of Personal Loan Taken (per million) in Turkey over 2015-2020",
x = "Amount of Personal Loan Taken (per million) Taken in a Month",
y = "Density") +
theme_minimal() +theme(axis.text.x = element_text(angle = 45, hjust = 1)) + facet_wrap(~year(Date))
ggplot(dailyData[,dailyConsumption,by=Date], aes(x=dailyConsumption)) +
geom_histogram(aes(y=..density..),colour="white", fill="orange",bins=12)+
geom_density(alpha=.2, fill="turquoise", colour="lightblue") +
labs(title = "Histograms of Amount of Personal Loan Taken (per million) in Turkey over 2015-2020",
x = "Amount of Personal Loan Taken (per million) Taken in a Month",
y = "Density") +
theme_minimal() +theme(axis.text.x = element_text(angle = 45, hjust = 1)) + facet_wrap(~year(Date))
bulkdata=read_excel("/Users/edakocakarin/Desktop/bulk_consumption_with_temp.xlsx")
bulkelectricity=data.table(Date=bulkdata$Date, Hour=bulkdata$Hour, Consumption=bulkdata$Consumption)
str(bulkelectricity)
bulkelectricity$Date=as.Date(bulkelectricity$Date, format = "%Y-%m-%d")
View(bulkelectricity)
ggplot(bulkelectricity,aes(x=Hour+1,y=Consumption))+geom_line(color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
bulkelectricity[,trend:=1:.N]
View(bulkelectricity)
ggplot(bulkelectricity,aes(x=trend,y=Consumption))+geom_line(color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
str(bulkelectricity)
ggplot(bulkelectricity,aes(x=trend,y=Consumption))+geom_line(color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(zoo)
library(GGally)
library(ggcorrplot)
library(urca)
library(forecast)
library(corrplot)
library(fpp)
solarpower=as.data.table(read.csv("/Users/edakocakarin/Desktop/production_data_with_weather.csv"))
solarpower$Date<-parse_date_time(solarpower[,Date], "Ymd")
solarpower[,Date:=as.Date(Date,format='%Y-%m-%d')]
solarpower[,dailymean:=mean(Production),by=Date]
View(solarpower)
ggplot(solarpower, aes(x=Date)) +geom_line(aes(y=Production), color="orange")+theme(axis.text.x = element_text(angle = 45))+
labs(x="Date",y="Production", title="Solar Power Plant Production between 2019-10-09 and 2021-02-02 Hourly")+
theme_minimal() +theme(axis.text.x=element_text(angle=45, hjust=1))+
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y")
ggplot(bulkelectricity,aes(x=Date))+geom_line(aes(y=Consumption),color="orange")+labs(x="Date",y="Hourly Consumption (mWh)", title=" Electricity Consumption in Turkey from 01-01-2017 to 28-01-2021")+
theme_minimal()+ scale_x_date(date_breaks = "6 month", date_labels =  "%b %Y")
# install the required packages first
require(jsonlite)
require(httr)
require(data.table)
library(lubridate)
library(dplyr)
library(ggplot2)
library(TeachingDemos)
library(urca)
library(GGally)
library(forecast)
library(RColorBrewer)
# some functions
residual_add = function(df){
days = c("sun", "mon", "tue", "wed", "thu", "fri", "sat")
for(i in 1:7){
df[,paste0("lag2_", days[i]):=shift(residual,2)]
df[Day!=i, paste0("lag2_", days[i]):=0]
df[,paste0("lag7_", days[i]):=shift(residual,7)]
df[Day!=i, paste0("lag7_", days[i]):=0]
}
return(df)
}
accuracy = function(actual, error){
n = length(actual)
mean = mean(actual)
sd = sd(actual)
FBias = sum(error)/sum(actual)
MAPE = sum(abs(error/actual))/n
MAD = sum(abs(error))/n
WMAPE = MAD / mean
r = data.frame(n, mean, sd, error, FBias, MAPE, MAD, WMAPE)
return(r[1,])
}
get_token <- function(username, password, url_site){
post_body = list(username=username,password=password)
post_url_string = paste0(url_site,'/token/')
result = POST(post_url_string, body = post_body)
# error handling (wrong credentials)
if(result$status_code==400){
print('Check your credentials')
return(0)
}
else if (result$status_code==201){
output = content(result)
token = output$key
}
return(token)
}
get_data <- function(start_date='2020-03-20', token, url_site){
post_body = list(start_date=start_date,username=username,password=password)
post_url_string = paste0(url_site,'/dataset/')
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
result = GET(post_url_string, header, body = post_body)
output = content(result)
data = data.table::rbindlist(output)
data[,event_date:=as.Date(event_date)]
data = data[order(event_date)]
return(data)
}
send_submission <- function(predictions, token, url_site, submit_now=F){
format_check=check_format(predictions)
if(!format_check){
return(FALSE)
}
post_string="list("
for(i in 1:nrow(predictions)){
if(i<nrow(predictions)){
post_string=sprintf("%s%s,",post_string,predictions$forecast[i])
} else {
post_string=sprintf("%s%s)",post_string,predictions$forecast[i])
}
}
submission = eval(parse(text=post_string))
json_body = jsonlite::toJSON(submission, auto_unbox = TRUE)
submission=list(submission=json_body)
print(submission)
# {"31515569":2.4,"32939029":2.4,"4066298":2.4,"6676673":2.4,"7061886":2.4,"85004":2.4}
if(!submit_now){
print("You did not submit.")
return(FALSE)
}
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
post_url_string = paste0(url_site,'/submission/')
result = POST(post_url_string, header, body=submission)
if (result$status_code==201){
print("Successfully submitted. Below you can see the details of your submission")
} else {
print("Could not submit. Please check the error message below, contact the assistant if needed.")
}
print(content(result))
}
# install the required packages first
require(jsonlite)
require(httr)
require(data.table)
library(lubridate)
library(dplyr)
library(ggplot2)
library(TeachingDemos)
library(urca)
library(GGally)
library(forecast)
library(RColorBrewer)
# some functions
residual_add = function(df){
days = c("sun", "mon", "tue", "wed", "thu", "fri", "sat")
for(i in 1:7){
df[,paste0("lag2_", days[i]):=shift(residual,2)]
df[Day!=i, paste0("lag2_", days[i]):=0]
df[,paste0("lag7_", days[i]):=shift(residual,7)]
df[Day!=i, paste0("lag7_", days[i]):=0]
}
return(df)
}
accuracy = function(actual, error){
n = length(actual)
mean = mean(actual)
sd = sd(actual)
FBias = sum(error)/sum(actual)
MAPE = sum(abs(error/actual))/n
MAD = sum(abs(error))/n
WMAPE = MAD / mean
r = data.frame(n, mean, sd, error, FBias, MAPE, MAD, WMAPE)
return(r[1,])
}
get_token <- function(username, password, url_site){
post_body = list(username=username,password=password)
post_url_string = paste0(url_site,'/token/')
result = POST(post_url_string, body = post_body)
# error handling (wrong credentials)
if(result$status_code==400){
print('Check your credentials')
return(0)
}
else if (result$status_code==201){
output = content(result)
token = output$key
}
return(token)
}
get_data <- function(start_date='2020-03-20', token, url_site){
post_body = list(start_date=start_date,username=username,password=password)
post_url_string = paste0(url_site,'/dataset/')
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
result = GET(post_url_string, header, body = post_body)
output = content(result)
data = data.table::rbindlist(output)
data[,event_date:=as.Date(event_date)]
data = data[order(event_date)]
return(data)
}
send_submission <- function(predictions, token, url_site, submit_now=F){
format_check=check_format(predictions)
if(!format_check){
return(FALSE)
}
post_string="list("
for(i in 1:nrow(predictions)){
if(i<nrow(predictions)){
post_string=sprintf("%s%s,",post_string,predictions$forecast[i])
} else {
post_string=sprintf("%s%s)",post_string,predictions$forecast[i])
}
}
submission = eval(parse(text=post_string))
json_body = jsonlite::toJSON(submission, auto_unbox = TRUE)
submission=list(submission=json_body)
print(submission)
# {"31515569":2.4,"32939029":2.4,"4066298":2.4,"6676673":2.4,"7061886":2.4,"85004":2.4}
if(!submit_now){
print("You did not submit.")
return(FALSE)
}
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
post_url_string = paste0(url_site,'/submission/')
result = POST(post_url_string, header, body=submission)
if (result$status_code==201){
print("Successfully submitted. Below you can see the details of your submission")
} else {
print("Could not submit. Please check the error message below, contact the assistant if needed.")
}
print(content(result))
}
check_format <- function(predictions){
if(is.data.frame(predictions) | is.data.frame(predictions)){
if('forecast' %in% names(predictions)){
if(nrow(predictions)==24){
if(all(is.numeric(predictions$forecast))){
print("Format OK")
return(TRUE)
} else {
print("forecast information is not numeric")
return(FALSE)
}
} else {
print("Forecasts for 24 hours should be provided, current number of rows:")
print(nrow(predictions))
return(FALSE)
}
}
} else {
print("Wrong format. Please provide data.frame or data.table object")
return(FALSE)
}
}
# this part is main code
subm_url = 'http://46.101.124.77'
u_name = "Group6"
p_word = "hS0QWkMIVXJwWMPD"
submit_now = FALSE
username = u_name
password = p_word
# install the required packages first
require(jsonlite)
require(httr)
require(data.table)
library(lubridate)
library(dplyr)
library(ggplot2)
library(TeachingDemos)
library(urca)
library(GGally)
library(forecast)
library(RColorBrewer)
# some functions
residual_add = function(df){
days = c("sun", "mon", "tue", "wed", "thu", "fri", "sat")
for(i in 1:7){
df[,paste0("lag2_", days[i]):=shift(residual,2)]
df[Day!=i, paste0("lag2_", days[i]):=0]
df[,paste0("lag7_", days[i]):=shift(residual,7)]
df[Day!=i, paste0("lag7_", days[i]):=0]
}
return(df)
}
accuracy = function(actual, error){
n = length(actual)
mean = mean(actual)
sd = sd(actual)
FBias = sum(error)/sum(actual)
MAPE = sum(abs(error/actual))/n
MAD = sum(abs(error))/n
WMAPE = MAD / mean
r = data.frame(n, mean, sd, error, FBias, MAPE, MAD, WMAPE)
return(r[1,])
}
get_token <- function(username, password, url_site){
post_body = list(username=username,password=password)
post_url_string = paste0(url_site,'/token/')
result = POST(post_url_string, body = post_body)
# error handling (wrong credentials)
if(result$status_code==400){
print('Check your credentials')
return(0)
}
else if (result$status_code==201){
output = content(result)
token = output$key
}
return(token)
}
get_data <- function(start_date='2020-03-20', token, url_site){
post_body = list(start_date=start_date,username=username,password=password)
post_url_string = paste0(url_site,'/dataset/')
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
result = GET(post_url_string, header, body = post_body)
output = content(result)
data = data.table::rbindlist(output)
data[,event_date:=as.Date(event_date)]
data = data[order(event_date)]
return(data)
}
send_submission <- function(predictions, token, url_site, submit_now=F){
format_check=check_format(predictions)
if(!format_check){
return(FALSE)
}
post_string="list("
for(i in 1:nrow(predictions)){
if(i<nrow(predictions)){
post_string=sprintf("%s%s,",post_string,predictions$forecast[i])
} else {
post_string=sprintf("%s%s)",post_string,predictions$forecast[i])
}
}
submission = eval(parse(text=post_string))
json_body = jsonlite::toJSON(submission, auto_unbox = TRUE)
submission=list(submission=json_body)
print(submission)
# {"31515569":2.4,"32939029":2.4,"4066298":2.4,"6676673":2.4,"7061886":2.4,"85004":2.4}
if(!submit_now){
print("You did not submit.")
return(FALSE)
}
header = add_headers(c(Authorization=paste('Token',token,sep=' ')))
post_url_string = paste0(url_site,'/submission/')
result = POST(post_url_string, header, body=submission)
if (result$status_code==201){
print("Successfully submitted. Below you can see the details of your submission")
} else {
print("Could not submit. Please check the error message below, contact the assistant if needed.")
}
print(content(result))
}
check_format <- function(predictions){
if(is.data.frame(predictions) | is.data.frame(predictions)){
if('forecast' %in% names(predictions)){
if(nrow(predictions)==24){
if(all(is.numeric(predictions$forecast))){
print("Format OK")
return(TRUE)
} else {
print("forecast information is not numeric")
return(FALSE)
}
} else {
print("Forecasts for 24 hours should be provided, current number of rows:")
print(nrow(predictions))
return(FALSE)
}
}
} else {
print("Wrong format. Please provide data.frame or data.table object")
return(FALSE)
}
}
# this part is main code
subm_url = 'http://46.101.124.77'
u_name = "Group6"
p_word = "hS0QWkMIVXJwWMPD"
submit_now = FALSE
username = u_name
password = p_word
##Temperature is here
prev_data = as.data.table(read.csv("/Users/edakocakarin/Documents/GitHub/fall20-edakocakarin/files/bulk_consumption_with_temp.csv"))
##Actual consumption is here
prev_data[,3] = as.data.table(read.csv("/Users/edakocakarin/Documents/GitHub/fall20-edakocakarin/files/Bulk_consumption.csv"))[1:35232,3]
##Temperature is here
prev_data = as.data.table(read.csv("/Users/edakocakarin/Documents/GitHub/fall20-edakocakarin/files/bulk_consumption_with_temp.csv"))
##Actual consumption is here
prev_data[,3] = as.data.table(read.csv("/Users/edakocakarin/Documents/GitHub/fall20-edakocakarin/files/Bulk_consumption.csv"))[1:35232,3]
##To get latest data
token = get_token(username=u_name, password=p_word, url=subm_url)
data_new = get_data(token=token,url=subm_url)
data_new = get_data(token=token,url=subm_url)
prev_data[,Date:=as.Date(Date)]
colnames(data_new) = colnames(prev_data)
colnames(data_new) = colnames(prev_data)
prev_data[,Consumption:=gsub(".","",Consumption, fixed=TRUE)]
prev_data[,Consumption:=as.double(gsub(",",".",Consumption, fixed=TRUE))]
data = rbind(prev_data, data_new)
data[,tmax:=max(T_1, T_2, T_3, T_4, T_5, T_6, T_7),by=Date]
data[,tmin:=min(T_1, T_2, T_3, T_4, T_5, T_6, T_7),by=Date]
data[,t_avg_max:=max(mean(T_1), mean(T_2), mean(T_3), mean(T_4), mean(T_5), mean(T_6), mean(T_7)),by=Date]
data[,t_avg_min:=min(mean(T_1), mean(T_2), mean(T_3), mean(T_4), mean(T_5), mean(T_6), mean(T_7)),by=Date]
data[,t_avg:=sum(T_1, T_2, T_3, T_4, T_5, T_6, T_7)/168, Date]
data[,tdiff:=tmax-tmin]
data[,index:=1:.N]
data[,tmax:=max(T_1, T_2, T_3, T_4, T_5, T_6, T_7),by=Date]
data[,tmin:=min(T_1, T_2, T_3, T_4, T_5, T_6, T_7),by=Date]
data[,t_avg_max:=max(mean(T_1), mean(T_2), mean(T_3), mean(T_4), mean(T_5), mean(T_6), mean(T_7)),by=Date]
data[,t_avg_min:=min(mean(T_1), mean(T_2), mean(T_3), mean(T_4), mean(T_5), mean(T_6), mean(T_7)),by=Date]
data[,t_avg:=sum(T_1, T_2, T_3, T_4, T_5, T_6, T_7)/168, Date]
data[,tdiff:=tmax-tmin]
data[,index:=1:.N]
## Introduction
In many countries of the world, production and distribution of electricity is regulated in a market structure in which producers are faced with several rules imposed by market regulator. There are various decisions a producer can make in these markets that have the power to affect market structure and profit of the producer in the short run. One of most important decision making process involves producers to report the amount of electricity that can supplied for the minimum amount of price they are willing to charge in each hour of the next day. The price of electricity for the next day can be determined by various algorithms that take these notified amounts as inputs. Therefore, it can be said that the decisions involved with production have definite influence on the profit or loss of the producer.
Turkish Electricity Market ruled by EPIAS is an example of such electricity markets. In this market, producers are obliged to declare the hourly amount of electricity to be produced and their relative minimum prices until 12 PM of the previous day. As mentioned before, the decision on the amounts are of high importance to the producers. To illustrate this fact basically, it can be said that a producer that have decided to produce a given amount may face higher demand. To provide for need the need of electricity, these producer may buy electricity from another one. However, in this case the producers incurs additional costs for buying electricity and supplying to customers gets less profitable if the producer were to declare a higher amount to be provided. A similar case can also be applied for unforeseen low demand. As can be understood from these examples, deciding on amounts based on a forecast with minimum errors is a primary aim for the producers in the market.
Because of the setting of the market and importance of the decisions, forecasting hourly demand of electricity in a day ahead fashion is a topic that has gained interest by industrial organizations as well as academics over the recent years. The aim of this study is also similar that it can be summarized as developing an hourly electricity load forecasting model by analyzing the consumption and limited temperature data from 2017 till mid-January 2021. The model developed is supposed to be tested on a test period between January 30th and February 13rd while measuring the performances of forecasts provided in a day ahead setting.
To help with forecasting several models from various domains can be constructed. Shah et al. (2019) argued that there are a lot of different techniques that are employed to forecast the hourly demand series such as Auto-Regressive models, Moving Averages, Seasonal ARIMA models, Spline Methods, Exponential Smoothing, Holt – Winters Methods and regression. As well as methods from time series and statistical modeling domains, with the increasing popularity of Machine Learning; forecasting techniques powered by Machine Learning and Data Mining algorithms, neural networks, decision trees and such have also been more widely used in the several past years. Nevertheless, for this study choosing a method from either time series or regression is more suitable.
The choice of the method can be facilitated by stating a couple of facts and observations for general hourly electricity consumption series. First of all, it is implied by Tepedino et al. (2014) that the series exhibit daily, weekly and yearly seasonality. Although methods from both time series and regression is suitable to use for forecasting series with seasonality, this is not the only feature of the electricity consumption series. The observations of electricity consumption may vary because of two other factors; calendar effects and temperature. (Calili et al, 2016) Though temperature levels may have some seasonality in general, the series are also subject to some unexpected behavior that may have especially increased in frequency because of rise in global temperature levels over the last few decades. Regarding the calendar effects, Chapagain et al. (2020) claims that the consumption tends to get lower in national holidays that may even contribute to the decrease in the electricity consumption in the week the holiday occurs. However, it is stated by Ziel (2018) that although the consumption incurred by industrial activities are reduced in holidays, consumption of electricity may get higher especially on touristic destinations. Furthermore, in Turkey there are also religious holidays which occur at different dates each year, another feature of the series that may worsen the performance of time series modelling. Hence, because of the complications introduced by temperature and special days, it is decided that linear regression can be a more suitable candidate to model the hourly electricity consumption of Turkey in this study.
From this discussion it can be inferred that modelling hour of the day, day of the week, yearly seasonality, temperature and occurrence of a special day such as national and religious holidays can be utilized in the model to be produced. Nonetheless, before developing a model it should be useful to analyze the data by proper visualizations to check whether these outlined rules also apply to the series at hand or if the data include additional features that may call for modelling. When the first few observations of the data are inspected,
```{r, include=TRUE, echo=FALSE}
data = data%>%arrange(Date, Hour)
head(data, 4)
It can be seen that the observations are gathered in an hourly fashion. Moreover, hourly temperature recordings from several destinations in Turkey such as Antalya, İstanbul, Adana, Eskişehir are also provided within the data. The series start from January 1st 2017 and include January 28th 2021 at last. Keeping in mind that the observations are recorded for each hour in each day for approximately 4 years, the visualizations will be constructed by both the hourly series and daily sum series to reduce the complexity introduced by vast number of observations. When the hourly observations are plotted with respect to time,
ggplot(data%>%filter(Date<"2021-01-29"), aes(x=index, y=Consumption)) +
geom_line(size = 0.5, color="chocolate3") +
labs(title = "Hourly Consumed Electricity in Turkey 2017-January 2021",
x = "Date Index",
y = "Hourly Consumed Electricity (mWh)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
